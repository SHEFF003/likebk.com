/*

	Copyright 2013 Arigato Software

	–°–∫—Ä–∏–ø—Ç —Ü–∏—Ñ—Ä–æ–≤—ã—Ö —á–∞—Å–æ–≤ –Ω–∞ Canvas

*/

var DigitalClock = {
	
	// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —á–∞—Å–æ–≤
	backColor: '#bbb8b6', // —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
	darkColor: '#aca9a7', // —Ü–≤–µ—Ç –≤—ã–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
	lightColor: '#2b2938', // —Ü–≤–µ—Ç –≤–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
	lineWidth: 31, // —Ç–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π
	lineLength: 125, // –¥–ª–∏–Ω–∞ –ª–∏–Ω–∏–π
	lineWidthSmall: 18, // —Ç–æ–ª—â–∏–Ω–∞ –ª–∏–Ω–∏–π
	lineLengthSmall: 57, // –¥–ª–∏–Ω–∞ –ª–∏–Ω–∏–π
	
	/*
		 -     0
		| |   1 2
		 -     3
		| |   4 5
		 -     6
	*/
	digits: [
		[1,1,1,0,1,1,1], // 0
		[0,0,1,0,0,1,0], // 1
		[1,0,1,1,1,0,1], // 2
		[1,0,1,1,0,1,1], // 3
		[0,1,1,1,0,1,0], // 4
		[1,1,0,1,0,1,1], // 5
		[1,1,0,1,1,1,1], // 6
		[1,0,1,0,0,1,0], // 7
		[1,1,1,1,1,1,1], // 8
		[1,1,1,1,0,1,1]  // 9
	],
	
	// –ó–∞–ø—É—Å–∫ —á–∞—Å–æ–≤
	start: function(canvasId) {
		var canvas = document.getElementById(canvasId);
		if ( canvas.getContext ) {
			var context = canvas.getContext('2d');
			this.context = context;
			var xScale = canvas.width / this.offset(30, 4);
			var yScale = canvas.height / this.offset(4, 2);
			context.scale(xScale, yScale);
			this.tick();
			setInterval(function(){DigitalClock.tick()}, 500);
		}
	},
	
	// –ü–æ–ª—É—á–∏—Ç—å —Ü–≤–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
	getColor: function(bool) {
		return ( bool ) ? this.lightColor : this.darkColor;
	},
	
	// – –∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–º–µ—â–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
	offset: function(countWidth, countLength) {
		return countWidth * this.lineWidth + countLength * this.lineLength;
	},
	
	// – –∞—Å—Å—á–∏—Ç–∞—Ç—å —Å–º–µ—â–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞
	offsetSmall: function(countWidth, countLength) {
		return countWidth * this.lineWidthSmall + countLength * this.lineLengthSmall;
	},
	
	// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–∏—Ñ—Ä—ã –Ω–∞ –∫–∞–Ω–≤–µ
	drawDigit: function(x, y, digit) {
		var ctx = this.context;
		
		ctx.save();
		ctx.translate(x, y);
		ctx.lineWidth = this.lineWidth;
		ctx.lineCap = 'round';
		
		// —Ä–∏—Å—É–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
		for (var i = 0; i < 3; i++) {
			var y = i * this.offset(1, 1);
			ctx.beginPath();
			ctx.strokeStyle = this.getColor(this.digits[digit][i*3]);
			ctx.moveTo(this.offset(1, 0), y);
			ctx.lineTo(this.offset(0, 1), y);
			ctx.stroke();
		}
		
		// —Ä–∏—Å—É–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
		for (var j = 0; j < 2; j++) {
			var y = j * this.offset(1, 1);
			for (var i = 0; i < 2; i++) {
				var x = i * this.offset(1, 1);
				ctx.beginPath();
				ctx.strokeStyle = this.getColor(this.digits[digit][1+j*3+i]);
				ctx.moveTo(x, y + this.offset(1, 0));
				ctx.lineTo(x, y + this.offset(0, 1));
				ctx.stroke();
			}
		}
		
		ctx.restore();
	},
	
	// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∏—Å–ª–∞ –Ω–∞ –∫–∞–Ω–≤–µ
	drawNumber: function(x, y, number, digits) {
		x += this.offset(4, 1) * (digits - 1);
		for ( ; digits--; ) {
			this.drawDigit(x, y, number % 10);
			number = Math.floor(number / 10);
			x -= this.offset(4, 1);
		}
	},
	
	// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–∏—Ñ—Ä—ã –Ω–∞ –∫–∞–Ω–≤–µ
	drawDigitSmall: function(x, y, digit) {
		var ctx = this.context;
		
		ctx.save();
		ctx.translate(x, y);
		ctx.lineWidth = this.lineWidthSmall/4;
		ctx.lineCap = 'round';
		
		for (var ki = 0; ki < 10; ki++) {
				
			// —Ä–∏—Å—É–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
			for (var i = 0; i < 3; i++) {
				var y = i * this.offsetSmall(1, 1);
				ctx.beginPath();
				ctx.strokeStyle = this.getColor(this.digits[digit][i*3]);
				ctx.moveTo(this.offsetSmall(1, 0), y);
				ctx.lineTo(this.offsetSmall(0, 1), y);
				ctx.stroke();
			}
			
			// —Ä–∏—Å—É–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
			for (var j = 0; j < 2; j++) {
				var y = j * this.offsetSmall(1, 1);
				for (var i = 0; i < 2; i++) {
					var x = i * this.offsetSmall(1, 1);
					ctx.beginPath();
					ctx.strokeStyle = this.getColor(this.digits[digit][1+j*3+i]);
					ctx.moveTo(x, y + this.offsetSmall(1, 0));
					ctx.lineTo(x, y + this.offsetSmall(0, 1));
					ctx.stroke();
				}
			}
		
		}
		
		ctx.restore();
	},
	
	// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∏—Å–ª–∞ –Ω–∞ –∫–∞–Ω–≤–µ
	drawNumberSmall: function(x, y, number, digits) {
		x += this.offset(4, 1) * (digits - 1) - 200;
		for ( ; digits--; ) {
			this.drawDigitSmall(x, y, number % 10);
			number = Math.floor(number / 10);
			x -= this.offsetSmall(4, 1);
		}
	},
	
	// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —á–∞—Å–æ–≤
	tick: function() {
		// –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
		var now = new Date();
		var hr = now.getHours();
		var mn = now.getMinutes();
		var sc = now.getSeconds();
		
		// –≤—ã–≤–æ–¥–∏–º –Ω–∞ –∫–∞–Ω–≤—É
		this.context.fillStyle = this.backColor;
		this.context.fillRect(0, 0, this.offset(36, 7), this.offset(4, 2));
		this.drawNumber(this.offset(1, 0), this.offset(1, 0), hr, 2);
		this.drawNumber(this.offset(12, 2), this.offset(1, 0), mn, 2);
		this.drawNumberSmall(this.offset(23, 4), this.offset(1, 0), sc, 2);
		
		// —Ä–∏—Å—É–µ–º —Ç–æ—á–∫–∏
		this.context.beginPath();
		
		this.context.arc(this.offset(9, 2), this.offset(1.5, 0.5), this.lineWidthSmall, 0, 2 * Math.PI, true);
		this.context.arc(this.offset(9, 2), this.offset(2.5, 1.5), this.lineWidthSmall, 0, 2 * Math.PI, true);
		
		this.context.fillStyle = this.getColor(this.bbtcl);
		this.context.strokeStyle = this.backColor;
		this.context.lineWidth = 1;
		this.context.fill();
		this.context.stroke();
		if( this.bbtcl == 1 ) { this.bbtcl = 0; }else{ this.bbtcl = 1; }
	},
	bbtcl:1
	
};